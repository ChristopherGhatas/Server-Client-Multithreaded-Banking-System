Multithreaded Banking System
 
In the bankingServer.c It sets a signal for later use. The array is set as well for the accounts. The mutexes are set and then eventually initialized for the commands that they will be used for. The mutexes are createX for the create command, depositX for the deposit command, withdrawX for the withdraw command, and queryX for the query command. Then a thread is created for the bank info in order for it to be printed every 15 seconds. Sleep is used to make the program sleep for 15 seconds. It calls print_bankinfo for the printing process where a semaphore is used to ensure that it does not deadlock when the clients are accessing data. Then the port number is set from the commandline arguments. A thread is created for accepting connections and it calls the function for it. ClientAccepting Function sets up the server connection and listens for clients in an eternal while loop. and the Thread is attempted to be joined again. Then the sockets are closed and the thread is exited.  
 
In the bankingClient.c, It sets up connecting to the server. If the server is not found, it is retried every 3 seconds. It creates a send Thread and receive thread and attempts to join both. The sendThread  is a function where it prompts user to enter command to the banking system. If it is valid, it sends it to the server and does the operation and throttles client input for 2 seconds. If it is invalid, then it does not send it, and it does not throttle user. Instead it prompts user immediately to do it again. The receive Thread receives input from server and prints it out. If the server disconnects with the end command in place, then it says the client has been disconnected. 
 
 
In the server side, the banking Operations are done in the clientThread. The ClientThread reads from the client. Then it places it into two strings with sscanf. If its create, it goes to InputParser where it does create command or checks if its a false command in case it passes the client somehow as a false command. If its serve it goes deeper into if statements for the rest of the commands. If its deposit, it mutexes and checks if its positive. If its positive, it adds the new amount to the old balance of the account. if its withdraw, it mutexes and checks if its positive. If its positive, it withdraws the amount from the balance unless its above the balance then it sends an error. if its query, it mutexes and sends the balance to client for it to printed. if its quit, it sets the account inservice to FALSE. and ends the session in the Account. 
if its end, it sets it to FALSE like it does in quit and it tells client itâ€™s going to disconnect.Then it exits the pthread. Then it stops the server, frees all the memory, and the main function ends.  
 